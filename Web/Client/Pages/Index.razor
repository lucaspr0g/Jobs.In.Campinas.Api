@page "/"

<PageTitle>Campinas Jobs - Vagas</PageTitle>

<div class="container mt-4">
	<h1>Campinas Jobs</h1>
	<div class="col mb-3">
		Sua plataforma exclusiva para encontrar as melhores oportunidades de emprego na região de Campinas.
		Conectamos talentos a empresas locais, oferecendo vagas em diversos setores. 
		Explore as vagas disponíveis abaixo!
	</div>
	<hr />
	<h1 class="mt-3 mb-3">Últimas vagas</h1>
	@foreach (var job in Jobs)
	{
		<div class="col">
			<div class="card mb-4 job-card">
				<a href="/vagas/@job.Id" class="job-card-link">
					<div class="card-header">
						<div class="row">
							<div><b>Título da vaga: </b>@job.Title</div>
							<div><b>Data: </b>@job.CreatedOn @job.Time</div>
							<div><b>Local: </b>@job.Location</div>
						</div>
					</div>
					<div class="card-body">
						<div class="row">
							<p><b>Descrição: </b>@job.Description</p>
						</div>
					</div>
				</a>
			</div>
		</div>
	}

	<Pagination ActivePageNumber="@pageNumber"
				TotalPages="totalPages"
				PageChanged="GetAsync"
				NextLinkText="Próxima"
				FirstLinkText="Primeira" 
				PreviousLinkText="Anterior" 
				LastLinkText="Última" />
</div>


@code {
	private bool shouldRender;
	private int pageNumber = 1;
	private int totalPages;

	private IEnumerable<JobEntity> Jobs = Enumerable.Empty<JobEntity>();

	protected override bool ShouldRender() => shouldRender;

	protected override async Task OnInitializedAsync()
	{
		await GetAsync(pageNumber);
	}

	private async Task GetAsync(int newPage)
	{
		try
		{
			PreloadService.Show(SpinnerColor.Primary);
			pageNumber = newPage;
			var response = await JobService.GetJobs(newPage);
			Jobs = response.Jobs;
			totalPages = response.TotalPages;
		}
		catch { }
		finally
		{
			shouldRender = true;
			PreloadService.Hide();
		}
	}
}
