@using Web.Client.Entities.Contact;
@inject IContactService ContactService

@page "/contato"
<PageTitle>Campinas Jobs - Contato</PageTitle>

<div class="container mt-4">
    <h1>Entre em Contato</h1>
    <p>Tem alguma pergunta, sugestão ou feedback para nós? Preencha o formulário abaixo e entraremos em contato o mais breve possível.</p>

	<EditForm Model="ContactModel" OnValidSubmit="Send">
		<DataAnnotationsValidator />
		<div class="mb-3">
			<label for="name" class="form-label">Nome</label>
			<InputText Id="name" class="form-control" @bind-Value="ContactModel.Name" />
			<ValidationMessage For="@(() => ContactModel.Name)" />
		</div>
		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<InputText Id="name" class="form-control" @bind-Value="ContactModel.Email" />
			<ValidationMessage For="@(() => ContactModel.Email)" />
		</div>
		<div class="mb-3">
			<label for="subject" class="form-label">Assunto</label>
			<InputText Id="subject" class="form-control" @bind-Value="ContactModel.Subject" />
			<ValidationMessage For="@(() => ContactModel.Subject)" />
		</div>
		<div class="mb-3">
			<label for="message" class="form-label">Mensagem</label>
			<InputTextArea Id="name" class="form-control" @bind-Value="ContactModel.Message" />
			<ValidationMessage For="@(() => ContactModel.Message)" />
		</div>
		<button type="submit" class="btn btn-primary">Enviar Mensagem</button>
	</EditForm>
</div>

@code {
	private ContactModel ContactModel = new();

	private async Task Send()
	{
		try
		{
			PreloadService.Show(SpinnerColor.Primary);
			var (success, message) = await ContactService.Send(ContactModel);

			if (success)
			{
				ToastService.Notify(new(ToastType.Success, message));
				ContactModel.Clear();
				StateHasChanged();
			}
			else
			{
				ToastService.Notify(new(ToastType.Danger, message));
			}
		}
		finally
		{
			PreloadService.Hide();
		}
	}
}